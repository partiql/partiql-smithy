package {{package}}

import com.amazon.ion.Decimal
import com.amazon.ion.IonType
import com.amazon.ion.IonWriter
import com.amazon.ion.system.IonBinaryWriterBuilder
import com.amazon.ion.system.IonTextWriterBuilder
import java.io.OutputStream

public abstract class {{domain}}Writer private constructor(writer: IonWriter) {

    @JvmField
    internal val writer: IonWriter = writer

    public fun flush() {
        writer.flush()
    }

    public fun finish() {
        writer.finish()
    }

    public fun writeDecimal(value: Decimal, precision: Int?, exponent: Int?) {
        if (precision != null && value.precision() > precision) {
            error("Expected decimal with precision <= $precision, got ${value.precision()}")
        }
        if (exponent != null && -value.scale() > exponent) {
            error("Expected decimal with exponent <= $exponent, got -${value.scale()}")
        }
        writer.writeDecimal(value)
    }

    public fun writeBlob(value: ByteArray, size: Int) {
        if (value.size != size) {
            error("ByteArray size `${value.size}` does not match type definition `blob($size)`")
        }
        writer.writeBlob(value)
    }

    private fun writeClob(value: ByteArray, size: Int) {
        if (value.size != size) {
            error("ByteArray size `${value.size}` does not match type definition `clob($size)`")
        }
        writer.writeClob(value)
    }

    private inline fun <T> writeArray(values: Collection<T>, size: Int?, write: (T) -> Unit) {
        if (size != null && values.size != size) {
            error("Collection size `${values.size}` does not match type definition <type>[$size]")
        }
        writer.stepIn(IonType.LIST)
        for (item in values) {
            write(item)
        }
        writer.stepOut()
    }

    {{#writes}}
    public abstract fun {{write}}(value: {{type}})

    {{/writes}}

    public companion object {

        @JvmStatic
        public fun text(output: Appendable): {{domain}}Writer = Text(IonTextWriterBuilder.standard().build(output))

        @JvmStatic
        public fun text(writer: IonWriter): {{domain}}Writer = Text(writer)

        @JvmStatic
        public fun packed(output: OutputStream): {{domain}}Writer = Packed(IonBinaryWriterBuilder.standard().build(output))

        @JvmStatic
        public fun packed(writer: IonWriter): {{domain}}Writer = Packed(writer)
    }

    private class Text(writer: IonWriter) : {{domain}}Writer(writer) {

        {{#writes}}
        override fun {{write}}(value: {{type}}) {
            {{{text}}}
        }

        {{/writes}}
    }

    private class Packed(writer: IonWriter) : {{domain}}Writer(writer) {

        {{#writes}}
        override fun {{write}}(value: {{type}}) {
            {{{packed}}}
        }

        {{/writes}}
    }
}
