public sealed interface {{name}} : {{parent}} {

    {{#tag}}
    private val tag: Int = {{.}}
    {{/tag}}

    {{#variants}}
    {{#type}}
    {{>type}}
    {{/type}}
    {{/variants}}

    companion object {

        @JvmStatic
        public fun read(reader: IonReader): {{name}} {
            reader.stepIn()
            assert(reader.next() == IonType.INT)
            val tag: Int = reader.intValue()
            reader.next()
            val variant =  when (tag) {
                {{#variants}}
                {{tag}} -> {{name}}.read(reader)
                {{/variants}}
                else -> error("Invalid tag `$tag` on union type `{{name}}`")
            }
            reader.stepOut()
            return variant
        }
    }
}
