public sealed interface {{name}} : {{parent}} {

    {{#variants}}
    {{#type}}
    {{>type}}
    {{/type}}
    {{/variants}}

    companion object {

        {{#tag}}
        public const val TAG: Long = {{.}}
        {{/tag}}

        @JvmStatic
        public fun read(reader: IonReader): {{name}} {
            assert(reader.type == IonType.SEXP)
            reader.stepIn()
            assert(reader.next() == IonType.INT)
            val tag: Long = reader.longValue()
            reader.next()
            val variant =  when (tag) {
                {{#variants}}
                {{name}}.TAG -> {{name}}.read(reader)
                {{/variants}}
                else -> error("Invalid tag `$tag` on union type `{{name}}`")
            }
            reader.stepOut()
            return variant
        }
    }
}
