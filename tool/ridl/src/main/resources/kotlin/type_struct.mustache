public data class {{name}}(
{{#fields}}
    @JvmField val {{name}}: {{type}},
{{/fields}}
) : {{parent}} {

    public override fun write(writer: IonWriter) {
        {{#tag}}
        {{parent}}.stepIn(writer)
        writer.stepIn(IonType.SEXP)
        writer.writeInt(TAG)
        {{/tag}}
        writer.stepIn(IonType.SEXP)
        {{#fields}}
        {{#write}}
        writer.{{write}}
        {{/write}}
        {{^write}}
        {{name}}.write(writer)
        {{/write}}
        {{/fields}}
        writer.stepOut()
        {{#tag}}
        writer.stepOut()
        {{parent}}.stepOut(writer)
        {{/tag}}
    }

    public companion object {

        {{#tag}}
        public const val TAG: Long = {{.}}
        {{/tag}}

        @JvmStatic
        public fun read(reader: IonReader): {{name}} {
            assert(reader.type == IonType.SEXP)
            reader.stepIn()
            {{#fields}}
            assert(reader.next() == IonType.{{ion}})
            {{#read}}
            val {{name}}: {{type}} = reader.{{read}}
            {{/read}}
            {{^read}}
            val {{name}}: {{type}} = {{type}}.read(reader)
            {{/read}}
            {{/fields}}
            assert(reader.next() == null)
            reader.stepOut()
            return {{name}}({{#fields}}{{name}},{{/fields}})
        }
    }
}
